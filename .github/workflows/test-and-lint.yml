name: Test and Lint

on:
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - id: install-dependencies
        if: ${{ steps.cache-dependencies.outputs.cache-hit != 'true' }}
        run: poetry install

      - id: install-jtd-codegen
        run: |
          # Download and unpack jtd-codegen
          jtd_codegen_archive_url=$(curl https://api.github.com/repos/jsontypedef/json-typedef-codegen/releases | jq '.[0].assets.[] | select(.name | test("linux-gnu"))' | jq -r '.browser_download_url')
          wget $jtd_codegen_archive_url -O jtd-codegen.zip
          unzip jtd-codegen.zip

          # Install jtd-codegen
          chmod +x jtd-codegen
          mv jtd-codegen .jtd-codegen/jtd-codegen
          export PATH=$PATH:$(pwd)/.jtd-codegen

          # Clean up
          rm -f jtd-codegen.zip

      - run: poetry run poe test jtd_codebuild/tests

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - if: ${{ steps.cache-dependencies.outputs.cache-hit != 'true' }}
        run: poetry install

      - run: poetry run poe lint

  check-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - if: ${{ steps.cache-dependencies.outputs.cache-hit != 'true' }}
        run: poetry install

      - run: poetry run poe check-format
